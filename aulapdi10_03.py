# -*- coding: utf-8 -*-
"""AulaPDI10/03.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rCBl-AU6rtXQN_OtL0F2IW7XCofiuQ22
"""

import cv2
from matplotlib import pyplot as plt
import numpy as np
import argparse
from google.colab import files

uploaded = files.upload()
img = cv2.imread('/content/ruido.jpg')

imgrgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
plt.imshow(imgrgb)
print("\nImagem RGB")
plt.show()

print('Largura em pixels: ', end='')
print(img.shape[1]) #Largura da img
print('Altura em pixels: ', end='')
print(img.shape[0]) #Altura da img
print('Quantidade de canais: ', end='')
print(img.shape[2])

plt.imshow(img)
print("\nImagem original")
plt.show()

alpha = 1.0 #Controle de contraste
beta  = 0   #Controle de brilho

try:
  alpha = float(input('* Entre com o valor de alfa [1.-3.0]: '))
  beta =  int(input('* Entre com o valor de beta [0-100]: '))

except ValueError:
  print('Error')

new_img = cv2.convertScaleAbs(imgrgb, alpha=alpha, beta=beta)
plt.imshow(new_img)
print("\nImagem com alteração no Brilho e contraste")
plt.show()

kernel = np.ones((5,5),np.float32)/25
dst = cv2.filter2D(img,-1,kernel)
plt.imshow(dst)

from skimage import color, data, restoration
from scipy.signal import convolve2d as convolve2d

astro = color.rgb2gray(imgrgb)
psf = np.ones((3, 3))/9
astro = convolve2d(astro, psf, 'same')
astro += 0.1*astro.std()*np.random.standard_normal(astro.shape)
deconvolved, _ = restoration.unsupervised_wiener(astro, psf)

fig, ax = plt.subplots(1, 2, figsize=(20, 5), sharex=True, sharey=True)
plt.gray()
ax[0].imshow(astro, vmin=deconvolved.min(), vmax=deconvolved.max())
ax[0].axis('off')
ax[0].set_title('Data')

ax[1].imshow(deconvolved)
ax[1].axis('off')
ax[1].set_title('Self tuned restoration')

fig.tight_layout()
plt.show

hsv = cv2.cvtColor(new_img, cv2.COLOR_BGR2HSV)
plt.imshow(hsv)

import cv2 as cv

gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
ret, thresh = cv2.threshold(gray,0,255,cv2.THRESH_BINARY_INV+cv2.THRESH_OTSU)

kernel = np.ones((3,3),np.uint8)
opening = cv2.morphologyEx(thresh,cv.MORPH_OPEN,kernel, iterations=2)
plt.imshow(opening)

sure_bg = cv2.dilate(opening,kernel,iterations=3)
plt.imshow(sure_bg)

dist_transform = cv2.distanceTransform(opening, cv2.DIST_L2,5)
ret, sure_fg = cv2.threshold(dist_transform,0.7*dist_transform.max(),255,0)
plt.imshow(sure_fg)

from IPython.terminal.pt_inputhooks import UnknownBackend
sure_fg = np.uint8(sure_fg)
unknown = cv.subtract(sure_bg,sure_fg)
plt.imshow(unknown)

from scipy.ndimage import interpolation
import pywt
import pywt.data

original = new_img

titles = ['Approximation', 'Horizontal detail', 'Vertical detail', 'Diagonal detail']
coeffs2 = pywt.dwt2(original, 'bior1.3')

LL, (LH, HL, HH) = coeffs2

fig = plt.figure(figsize=(12, 3))
for i, a in enumerate([LL, LH, HL, HH]):
  ax = fig.add_subplot(1, 4, i+1)
  ax.imshow(a, interpolation="nearest", cmap=plt.cm.gray)
  ax.set_title(titles[i], fontsize=10)
  ax.set_xticks([])
  ax.set_yticks([])

fig.tight_layout()
plt.show()

gray = cv2.cvtColor(dst, cv2.COLOR_BGR2GRAY)
ret, thresh = cv2.threshold(gray,0,255,cv2.THRESH_BINARY_INV+cv2.THRESH_OTSU)
plt.imshow(thresh,cmap='gray')

edges = cv2.Canny(thresh, 100,200)
plt.imshow(edges,cmap='gray')

img = cv.imread('/content/ruido.jpg', 0)
img = cv.medianBlur(img,5)
cimg = cv.cvtColor(img, cv.COLOR_GRAY2BGR)
circles = cv.HoughCircles(img, cv.HOUGH_GRADIENT,1,20,param1=50,param2=30,minRadius=0,maxRadius=0)
circles = np.uint16(np.around(circles))

for i in circles[0,:]:
  cv.circle(cimg,(i[0],i[1]),i[2],(0,255,0),2)
  cv.circle(cimg,(i[0],i[1]),2,(0,255,0),3)

plt.imshow(cimg)

