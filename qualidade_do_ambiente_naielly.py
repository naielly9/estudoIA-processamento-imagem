# -*- coding: utf-8 -*-
"""Qualidade do ambiente_Naielly

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1u1OayEBpmc1oyMPHutLDRYCkC5Deo8vE
"""

!pip install networkx==2.6.2
!pip install scikit-fuzzy

import numpy as np
import skfuzzy as fuzz
from skfuzzy import control as ctrl


indice = ctrl.Antecedent(np.arange(0, 501, 1), 'indice')
temperatura = ctrl.Antecedent(np.arange(0, 51, 1), 'temperatura')
umidade = ctrl.Antecedent(np.arange(0, 101, 1), 'umidade')
ambiente = ctrl.Consequent(np.arange(0, 11, 1), 'ambiente')

grupo = ctrl.Consequent(np.arange(0,651, 1), 'grupo', defuzzify_method= 'CENTROID')

indice['perigoso'] = fuzz.trimf(indice.universe, [300, 500, 500])
indice['muito insalubre'] = fuzz.trimf(indice.universe, [200, 300, 300])
indice['insalubre'] = fuzz.gaussmf(indice.universe, 200, 150)
indice['insalubre para grupos sensíveis'] = fuzz.trimf(indice.universe, [100, 150, 150])
indice['moderado'] = fuzz.trapmf(indice.universe, [0, 50, 80, 100])
indice['bom'] = fuzz.trapmf(indice.universe, [0, 0, 30, 50])

temperatura['Muito_frio'] = fuzz.trimf(temperatura.universe, [0, 8, 8])
temperatura['Levemente_frio'] = fuzz.gaussmf(temperatura.universe, 7, 2)
temperatura['Media'] = fuzz.gaussmf(temperatura.universe, 16, 7)
temperatura['Levemente_quente'] = fuzz.gaussmf(temperatura.universe, 25, 16)
temperatura['Muito_quente'] = fuzz.trimf(temperatura.universe, [25, 50, 50])

umidade['baixa'] = fuzz.trimf(umidade.universe, [0, 30, 30])
umidade['media'] = fuzz.gaussmf(umidade.universe, 38, 30)
umidade['alta'] = fuzz.gaussmf(umidade.universe, 55, 38)
umidade['muito alta'] = fuzz.trimf(umidade.universe, [60, 100, 100])

ambiente['curta'] = fuzz.trapmf(ambiente.universe, [0, 0, 5, 5])
ambiente['aceitável'] = fuzz.trimf(ambiente.universe, [5, 8, 8])
ambiente['longa'] = fuzz.trapmf(ambiente.universe, [8, 9, 10, 10])

indice.view()
temperatura.view()
umidade.view()
ambiente.view()

rule1 = ctrl.Rule(indice['bom'] & temperatura['Media'], ambiente['longa'])
rule2 = ctrl.Rule(indice['insalubre para grupos sensíveis'] | indice['insalubre'], ambiente['curta'])
rule3 = ctrl.Rule(indice['perigoso'] & umidade['muito alta'], ambiente['curta'])
rule4 = ctrl.Rule(temperatura['Media'] & umidade['alta'], ambiente['aceitável'])
rule5 = ctrl.Rule(temperatura['Media'] & umidade['baixa'] | umidade['media'], ambiente['longa'])
rule6 = ctrl.Rule(temperatura['Levemente_quente'] | temperatura['Muito_quente'] & umidade['muito alta'], ambiente['curta'])
rule7 = ctrl.Rule(indice['moderado'] & temperatura['Media'], ambiente['aceitável'])

ambiente_ctrl = ctrl.ControlSystem([rule1, rule2, rule3, rule4, rule5, rule6, rule7])
ambiente_simulador = ctrl.ControlSystemSimulation(ambiente_ctrl)


# Entranda da temperatura
while True:
  temp = float(input('Digite a T (ºC): '))
  if(temp<0 or temp >50):
    print('A temperatura deve estar no intervalo [0, 50]')
    continue
  ambiente_simulador.input['temperatura'] = temp
  break
# Entrada da umidade relativa
while True:
  ur = float(input('Digite a UR (%): '))
  if(ur<0 or  temp >100):
    print('A umidade deve estar no intervalo [0, 100]')
    continue
  ambiente_simulador.input['umidade'] = ur
  break

while True:
  ind = float(input('Digite o indice: '))
  if(ind<0 or ind >500):
    print('O indice deve estar no intervalo [0, 500]')
    continue
  ambiente_simulador.input['indice'] = ind
  break

# Computando o resultado (Inferência Fuzzy + Defuzzificação)
ambiente_simulador.compute()
print(ambiente_simulador.output['ambiente'])


# Visualizando as regiões
umidade.view(sim=ambiente_simulador)
indice.view(sim=ambiente_simulador)
temperatura.view(sim=ambiente_simulador)
ambiente.view(sim=ambiente_simulador)