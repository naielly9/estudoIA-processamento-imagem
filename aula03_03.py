# -*- coding: utf-8 -*-
"""Aula03_03.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/151gjRCzp8fpu1NUrTRA2dEh6iXWSLtI6
"""

import cv2
from matplotlib import pyplot as plt
import numpy as np
from google.colab import files

img = cv2.imread('/content/sample_data/madruga.jpg')

"""EX 1."""

plt.figure(figsize=(8,20))
plt.imshow(img)
plt.title("Imagem BGR")
plt.xticks([]),plt.yticks([])
plt.show()

img_rgb = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)
plt.figure(figsize=(8,20))
plt.imshow(img_rgb)
plt.title("Imagem RGB")
plt.xticks([]),plt.yticks([])
plt.show()

dimensions_rgb = img_rgb.shape
print('Dimensão imagem original', dimensions_rgb)

n = 5
img_red5 = img_rgb[::n, ::n]
dimensions5 = img_red5.shape
print('Dimensão imagem n5', dimensions5)

n = 10
img_red10 = img_rgb[::n, ::n]
dimensions10 = img_red10.shape
print('Dimensão imagem n10', dimensions10)

n = 30
img_red30 = img_rgb[::n, ::n]
dimensions30 = img_red30.shape
print('Dimensão imagem n30', dimensions30)

fig = plt.figure(figsize=(30,20))
ax0 = fig.add_subplot(141)
plt.imshow(img_rgb)
plt.title("Amostragem 1600x1200")
plt.xticks([]), plt.yticks([])

ax1 = fig.add_subplot(142)
plt.imshow(img_red5)
plt.title("Amostragem 320x240")
plt.xticks([]), plt.yticks([])

ax2 = fig.add_subplot(143)
plt.imshow(img_red10)
plt.title("Amostragem 160x120")
plt.xticks([]), plt.yticks([])

ax3 = fig.add_subplot(144)
plt.imshow(img_red30)
plt.title("Amostragem 54x40")
plt.xticks([]), plt.yticks([])
plt.show()

"""A primeira imagem é a original, podemos perceber que na segunda foto temos uma amostragem deixando a imagem com 320x240 podendo perceber que as partes menores como o bigode do gato foi desaparecendo. Ja na imagem com 160x120 foi aplicado nitidez maior deixando o rosto dele e algumas partes do corpo mais nitido e na imagem 3 54x40 foi aplicado na imagem inteira e ela ficou dificil de ser reconhecida."""

dimensions_rgb = img_red10.shape
print('Dimensão imagem original', dimensions_rgb)

m = 5
img_aum5 = np.repeat(img_red10, m, axis=0)
img_aum5 = np.repeat(img_red5, m, axis=1)
dimensions5 = img_aum5.shape
print('Dimensão imagem m5', dimensions5)

m = 10
img_aum10 = np.repeat(img_red10, m, axis=0)
img_aum10 = np.repeat(img_red10, m, axis=1)
dimensions10 = img_aum10.shape
print('Dimensão imagem m10', dimensions10)

m = 30
img_aum30 = np.repeat(img_red10, m, axis=0)
img_aum30 = np.repeat(img_red30, m, axis=1)
dimensions30 = img_aum30.shape
print('Dimensão imagem m30', dimensions30)

fig = plt.figure(figsize=(30,20))
ax0 = fig.add_subplot(141)
plt.imshow(img_red10)
plt.title("Imagem original 160x120")
plt.xticks([]), plt.yticks([])

ax1 = fig.add_subplot(142)
plt.imshow(img_aum5)
plt.title("Aumento 320x1200")
plt.xticks([]), plt.yticks([])

ax2 = fig.add_subplot(143)
plt.imshow(img_aum10)
plt.title("Aumento 160x1200")
plt.xticks([]), plt.yticks([])

ax3 = fig.add_subplot(144)
plt.imshow(img_aum30)
plt.title("Aumento 54x1200")
plt.xticks([]), plt.yticks([])
plt.show()

"""Podemos realizar o aumento da imagem conforme a necessidade, podemos verificar os tres tipos de aumento realizados nas amostragem e que a cada aplicação ficou mais dificil de enxergar a imagem. Na primeira podemos descadar de como o fundo ficou desproporcional e as orelhas do gato maiores que na imagem original.

Ex 2.
"""

r = 2
img_quant2 = np.uint8(img_rgb / r)*r
r = 64
img_quant64 = np.uint8(img_rgb / r)*r
r = 128
img_quant128 = np.uint8(img_rgb / r)*r

fig = plt.figure(figsize=(30,20))
ax0 = fig.add_subplot(141)
plt.imshow(img_rgb)
plt.title("256 níveis de cinza")
plt.xticks([]), plt.yticks([])

ax1 = fig.add_subplot(142)
plt.imshow(img_quant2)
plt.title("128 níveis de cinza")
plt.xticks([]), plt.yticks([])

ax2 = fig.add_subplot(143)
plt.imshow(img_quant64)
plt.title("4 níveis de cinza")
plt.xticks([]), plt.yticks([])

ax3 = fig.add_subplot(144)
plt.imshow(img_quant128)
plt.title("2 níveis de cinza")
plt.xticks([]), plt.yticks([])
plt.show()

gray = cv2.cvtColor(img_rgb, cv2.COLOR_BGR2GRAY)
plt.figure(figsize=(8,20))
plt.imshow(gray, cmap='gray')
plt.title('Imagem em níveis de cinza')
plt.xticks([]), plt.yticks([])
plt.show()

"""Em cada quantização podemos escolher qual a quantidade de níveis de cinza que desejamos ter na imagem, portanto pegamos o valor maximo dela que é de 256 e assim realizamos a divisão adquirindo os níveis e os aplicando.
Portanto, é visível como que em cada imagem foi aplicado os níveis de cinza. Segunda 128 tons, terceira 4 tons de cinza e na quarta 2 tons de cinza.

Agora na ultima imagem transformamos ela inteira em cinza

EX 3.
"""

r = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
r[:,:,1]=0
r[:,:,2]=0

fig = plt.figure(figsize=(15,20))
ax1 = fig.add_subplot(121)
plt.xticks([]), plt.yticks([])
plt.imshow(img_rgb)
plt.title("Imagem RGB")

ax2 = fig.add_subplot(122)
plt.xticks([]), plt.yticks([])
plt.imshow(r)
plt.title("Imagem cor vermelha")
plt.show()

g = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
g[:,:,0]=0
g[:,:,2]=0

fig = plt.figure(figsize=(15,20))
ax1 = fig.add_subplot(121)
plt.xticks([]), plt.yticks([])
plt.imshow(img_rgb)
plt.title("Imagem RGB")

ax2 = fig.add_subplot(122)
plt.xticks([]), plt.yticks([])
plt.imshow(g)
plt.title("Imagem cor verde")
plt.show()

b = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
b[:,:,0]=0
b[:,:,1]=0

fig = plt.figure(figsize=(15,20))
ax1 = fig.add_subplot(121)
plt.xticks([]), plt.yticks([])
plt.imshow(img_rgb)
plt.title("Imagem RGB")

ax2 = fig.add_subplot(122)
plt.xticks([]), plt.yticks([])
plt.imshow(b)
plt.title("Imagem cor azul")
plt.show()